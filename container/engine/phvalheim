#!/bin/bash
echo
echo "`date` [NOTICE : phvalheim] Starting PhValheim pre-flight..."
echo "`date` [NOTICE : phvalheim] Loading PhValheim variables from environment..."
echo "`date` [NOTICE : phvalheim] PhValheim Version: $phvalheimVersion"
echo "`date` [NOTICE : phvalheim] basePort: $basePort"
echo "`date` [NOTICE : phvalheim] defaultSeed: $defaultSeed"
echo "`date` [NOTICE : phvalheim] Game DNS: $gameDNS"
echo "`date` [NOTICE : phvalheim] PhValheim Host: $phvalheimHost"
echo "`date` [NOTICE : phvalheim] PhValheim Client URL: $phvalheimClientURL"


# load configs
source /opt/stateless/engine/includes/phvalheim-static.conf
source /opt/stateless/engine/includes/0-functions.sh

# set timezone using database value
/opt/stateless/engine/tools/tzSetter.sh

# wait for database
/opt/stateless/engine/includes/1-waitfordatabase.sh

# run database schema update processor
/opt/stateless/engine/tools/dbUpdater.sh

# prep directories and filesystem
/opt/stateless/engine/tools/phvalheimprep.sh

# pull settings from database
#steamApiKey=$(SQL "SELECT steamApiKey FROM settings")
export maxLogSize=$(SQL "SELECT maxLogSize FROM settings")
export backupsToKeep=$(SQL "SELECT backupsToKeep FROM settings")

# set environment
/usr/bin/printenv |grep -v "HOME="|grep -v "PWD=" > /etc/environment
cat /etc/bash.bashrc|grep "source /etc/environment" > /dev/null 2>&1
if [ ! $? = 0 ]; then
        echo "source /etc/environment" >> /etc/bash.bashrc
fi

# post pre-flight echos
#echo "`date` [NOTICE : phvalheim] Steam API Key: $steamApiKey"
echo "`date` [NOTICE : phvalheim] backupsToKeep: $backupsToKeep"
echo "`date` [NOTICE : phvalheim] maxLogSize: $maxLogSize"

# start the engine
echo "`date` [NOTICE : phvalheim] Starting PhValheim engine..."

####### BEGIN: Main loop #######
while [ true ]; do
	sleep 2

	WORLDS=$(SQL "SELECT id FROM worlds;")

	for WORLD in $WORLDS; do
		worldID=$WORLD
		worldMode=$(SQL "SELECT mode FROM worlds WHERE id='$worldID';")
		worldName=$(SQL "SELECT name FROM worlds WHERE id='$worldID';")
		worldPort=$(SQL "SELECT port FROM worlds WHERE id='$worldID';")
		worldSeed=$(SQL "SELECT seed FROM worlds WHERE id='$worldID';")
		worldHost=$(SQL "SELECT external_endpoint FROM worlds WHERE id='$worldID';")
		worldPassword="hammertime";


		if [ "$worldMode" = "stopped" ]; then
			orphanedPIDs=$(ps -ef|grep phvalhe+|grep "/opt/stateful/games/valheim/worlds/$worldName/game/valheim_server.x86_64"|grep -v "sh -c"|grep -v grep|tr -s " " |cut -d " " -f2)
			for orphanedPID in $orphanedPIDs; do
				echo "`date` [WARN: phvalheim] Murdering orphaned PID: $orphanedPID"
				kill -9 $orphanedPID
			done
		fi


		if [ -z "$worldSeed" ]; then
			worldSeed="$defaultSeed"
		fi


		if [ "$worldMode" = "create" ]; then
			echo "`date` [NOTICE : phvalheim] New world '$worldName' detected, creating..."
			SQL "UPDATE worlds SET mode='creating' WHERE name='$worldName'"
			if [ ! -d "$worldsDirectoryRoot/$worldName" ]; then
				echo "`date` [NOTICE : phvalheim] Worlds directory for '$worldName' is missing, creating..."

				#get next availble port
				worldPort=$(getNextPort)
				SQL "UPDATE worlds SET port='$worldPort' WHERE name='$worldName'"

				#prep world directory structure
				worldDirPrep "$worldName"

				echo "`date` [NOTICE : phvalheim] Deploying new world '$worldName'..."
				chown -R phvalheim: $worldsDirectoryRoot/$worldName
				RESULT=$?
				if [ $RESULT = 0 ]; then
					echo "`date` [NOTICE : phvalheim] World '$worldName' successfully created..."
			
					echo "`date` [NOTICE : phvalheim] Checking for required mods..."

					#create supervisor config file for this world
					createSupervisorWorldConfig "$worldName" "$worldPassword" "$worldPort"

	                                #set create and updated timestamp for new deployment
	                                SQL "UPDATE worlds SET date_deployed='`date +'%F %T'`' WHERE name='$worldName'"
	
					#set new world to update state
					SQL "UPDATE worlds SET mode='update' WHERE name='$worldName'"
			
				else
					echo "`date` [FAIL : phvalheim] ERROR: World '$worldName' failed deployment..."
					SQL "DELETE FROM worlds WHERE name='$worldName'"
					rm -rf /opt/stateful/games/valheim/worlds/$worldName
				fi
			fi
		fi

		if [ "$worldMode" = "delete" ]; then
			echo "`date` [WARN : phvalheim] Delete command received for world '$worldName':"
			worldNameLength=$(echo "$worldName"|wc -c)
			if [ $worldNameLength -gt 1 ]; then
				echo "`date` [WARN : phvalheim] Deleting world '$worldName'..."
	                        orphanedPIDs=$(ps -ef|grep phvalhe+|grep "/opt/stateful/games/valheim/worlds/$worldName/game/valheim_server.x86_64"|grep -v "sh -c"|grep -v grep|tr -s " " |cut -d " " -f2)
	                        for orphanedPID in $orphanedPIDs; do
	                                echo "`date` [WARN : phvalheim] Murdering orphaned PID: $orphanedPID"
	                                kill -9 $orphanedPID
	                        done
				rm -rf $worldsDirectoryRoot/$worldName
			        
				#delete supervisor config file for this world
                                deleteSupervisorWorldConfig "$worldName"

				SQL "DELETE FROM worlds WHERE name='$worldName'"
			fi
		fi

                if [ "$worldMode" = "stop" ]; then
			echo "`date` [NOTICE : phvalheim] Stop command received for world '$worldName':"
			#worldPID=$(SQL "SELECT pid FROM worlds WHERE id='$worldID';")	
			#ps -p $worldPID > /dev/null 2>&1
			/usr/bin/supervisorctl status valheimworld_$worldName > /dev/null 2>&1
                        worldPID_status=$?
			if [ $? = 0 ]; then
				SQL "UPDATE worlds SET mode='stopping' WHERE name='$worldName'"
				echo "`date` [NOTICE : phvalheim] Stopping world '$worldName'..."
				/usr/bin/supervisorctl stop valheimworld_$worldName > /dev/null 2>&1
				
                                #list_descendants (){
                                #        local children=$(ps -o pid= --ppid "$1")
                                #        for pid in $children; do
                                #                list_descendants "$pid"
                                #        done
                                #        echo "$children"
                                #}

                                #kill -INT $(list_descendants $worldPID)
			else
				echo "`date` [WARN : phvalheim] World '$worldName' doesn't appear to be running..."
				SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"
			fi

			#Give it time to stop (we're sending a graceful shutdown, SIGINT)
			killLoop=0
			while [ $killLoop -le 5 ]; do
				sleep 10 
				let killLoop=killLoop+1
				ps -p $worldPID > /dev/null 2>&1
	                        if [ ! $? = 0 ]; then
	                                echo "`date` [NOTICE : phvalheim] World '$worldName' successfully stopped."
					SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"
					break
				else
					echo "`date` [WARN : phvalheim] World '$worldName' did not stop in the allowed time of 10 seconds. The world may still stop soon. You should probably check this..."
	                        fi
			done
		
		fi

		if [ "$worldMode" = "start" ]; then
			echo "`date` [NOTICE : phvalheim] Start command recieved for world '$worldName':"
			#echo

			#worldPID=$(SQL "SELECT pid FROM worlds WHERE id='$worldID';")
			#ps -p $worldPID > /dev/null 2>&1
			/usr/bin/supervisorctl status valheimworld_$worldName > /dev/null 2>&1
			worldPID_status=$?
			if [ $worldPID_status = 0 ]; then
				echo "`date` [WARN : phvalheim] World '$worldName' is already running..."
				SQL "UPDATE worlds SET mode='running' WHERE name='$worldName'"
			else
				SQL "UPDATE worlds SET mode='starting' WHERE name='$worldName'"
				#su phvalheim -c "/opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort" &
				/usr/bin/supervisorctl start valheimworld_$worldName > /dev/null 2>&1
				if [ $? != 0 ]; then
					echo "`date` [ERROR : phvalheim] ERROR: Could not start world '$worldName', exiting..."
					exit 1
				fi

				
				#worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
				/usr/bin/supervisorctl status valheimworld_$worldName > /dev/null 2>&1
				worldPID_status=$?		
				while [ $worldPID_status != 0 ]; do
					echo "`date` [NOTICE : phvalheim] Waiting for world '$worldName' to start..."
					sleep 2
					/usr/bin/supervisorctl status valheimworld_$worldName > /dev/null 2>&1
					#worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
	                                worldPID_status=$?
				done
	
				
				#worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
				/usr/bin/supervisorctl status valheimworld_$worldName > /dev/null 2>&1
                                worldPID_status=$?	
				if [ $worldPID_status = 0 ]; then
					echo "`date` [NOTICE : phvalheim] World '$worldName' has started!"
					#SQL "UPDATE worlds SET pid='$worldPID' WHERE name='$worldName'"
					SQL "UPDATE worlds SET mode='running' WHERE name='$worldName'"
				else
					echo "`date` World '$worldName' wasn't able to start, exiting..."
					SQL "UPDATE worlds SET mode='broken' WHERE name='$worldName'"
				fi
			fi
		fi

		if [ "$worldMode" = "update" ]; then
			echo "`date` [NOTICE : phvalheim] Update command recieved for world '$worldName':"
	                worldPID=$(SQL "SELECT pid FROM worlds WHERE id='$worldID';")
                        ps -p $worldPID > /dev/null 2>&1
                        if [ $? = 0 ]; then
                                echo "`date` [WARN : phvalheim] World '$worldName' is running. Stop the world before updating..."
			else
				echo "`date` [NOTICE : phvalheim] Updating world '$worldName'..."
				SQL "UPDATE worlds SET mode='updating' WHERE name='$worldName'"

				#Update Steam
				updateSteam

				#Update Valheim
				InstallAndUpdateValheim "$worldName"

				#Update BepInEx
				InstallAndUpdateBepInEx "$worldName"

				#Delete mods+configs, before downloading, installing and packaging. This is needed when a mod is removed.
				purgeWorldModsConfigsPatchers "$worldName"

                                #add required mods to final list
                                mergeRequiredTsMods "$worldName"

				#Install mods
				downloadAndInstallTsModsForWorld "$worldName"

                                #generate mod viwer list
                                generateModViewerJson "$worldName"

				#Generate quick connect config
				createQuickConnectConfig "$worldName" "$worldHost" "$worldPort" "$worldPassword"

                                #Install custom mods and config
                                installCustomModsConfigsPatchers "$worldName"

				#Packge client
                                packageClient "$worldName"

				#Copy custom_config_secure files to. These files will not end up on the client side
                                InstallCustomConfigSecureFiles "$worldName"

				#Update the database to reflect new client pacakge version via MD5
                                worldMD5=$(getMD5 "/opt/stateful/games/valheim/worlds/$worldName/$worldName.zip")
                                setMD5 "$worldName" "$worldMD5"

				#set last updated timestamp
				SQL "UPDATE worlds SET date_updated='`date +'%F %T'`' WHERE name='$worldName'"

				#finally, set the world to stopped state
				SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"

								

			fi
		fi



	done

done
####### END: Main loop #######
