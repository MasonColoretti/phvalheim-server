#!/bin/bash

echo
echo "Starting PhValheim engine..."
echo " Loading PhValheim engine config ['/opt/stateless/engine/phvalheim.conf']...";
source /opt/stateless/engine/phvalheim.conf


if [ ! -d "$worldsDirectoryRoot" ]; then
	echo " Worlds directory Root missing, creating..."
        mkdir -p $worldsDirectoryRoot
fi


####### BEGIN: Functions #######
function getNextPort(){
        port=$basePort
        usedPorts=$(SQL "SELECT port FROM worlds;"|sort|uniq)
        echo "$usedPorts"|grep -w $port > /dev/null 2>&1
        RESULT=$?
        while [ $RESULT = 0 ]; do
                let port=$port+1
                echo "$usedPorts"|grep -w $port > /dev/null 2>&1
                RESULT=$?
        done

        echo $port
}
####### END: Functions #######


#We sit and wait to make sure MySQL is really, really up. We can't do anything without a database.
dbCheck_output=$(/usr/bin/mysql -e "DROP DATABASE IF EXISTS testdb;CREATE DATABASE testdb;DROP DATABASE IF EXISTS testdb;" 2>&1)
dbCheck_exitstatus=$?

while [ ! $dbCheck_exitstatus = 0 ]; do
        echo "Waiting for MySQL to come up..."
        sleep 2
        dbCheck_output=$(/usr/bin/mysql -e "DROP DATABASE IF EXISTS testdb;CREATE DATABASE testdb;DROP DATABASE IF EXISTS testdb;" 2>&1)
        dbCheck_exitstatus=$?
done

if [ $dbCheck_exitstatus = 0 ]; then
        echo "MySQL is up and accepting connections..."
fi


#make sure we have an existing or fresh database to use
dbCheck_output=$(/usr/bin/mysql -e "use phvalheim;" 2>&1 |grep "Unknown database" > /dev/null 2>&1)
dbCheck_exitstatus=$?
if [ $dbCheck_exitstatus = 0 ]; then
	echo "PhValheim database is missing, creating a fresh database... (DB check exit code: $?)"
	/opt/stateless/scripts/newdbMySQL.sh
else
	echo "Existing PhValheim database found, using it..."
fi


#prep perms
useradd phvalheim > /dev/null 2>&1
chown phvalheim: /opt/stateful
chown phvalheim: /opt/stateful/games
chown mysql: /opt/stateful/mysql
chown -R phvalheim: /tmp/dumps


#world prep: ensure all worlds are in a stopped state (fresh PhValheim start)
WORLDS=$(SQL "SELECT id FROM worlds;")
for WORLD in $WORLDS; do
	echo "Setting '$WORLD' to stopped..."
	SQL "UPDATE worlds SET mode='stopped' WHERE id='$WORLD';"
done


####### BEGIN: Main loop #######
while [ true ]; do
	sleep 2

	WORLDS=$(SQL "SELECT id FROM worlds;")

	for WORLD in $WORLDS; do
		worldID=$WORLD
		worldMode=$(SQL "SELECT mode FROM worlds WHERE id='$worldID';")
		worldName=$(SQL "SELECT name FROM worlds WHERE id='$worldID';")
		worldPort=$(SQL "SELECT port FROM worlds WHERE id='$worldID';")
		worldSeed=$(SQL "SELECT seed FROM worlds WHERE id='$worldID';")


		if [ "$worldMode" = "stopped" ]; then
			orphanedPIDs=$(ps -ef|grep phvalhe+|grep "/opt/stateful/games/valheim/worlds/$worldName/valheim_server.x86_64"|grep -v "sh -c"|grep -v grep|tr -s " " |cut -d " " -f2)
			for orphanedPID in $orphanedPIDs; do
				echo "Murdering orphaned PID: $orphanedPID"
				kill -9 $orphanedPID
			done
		fi


		if [ -z "$worldSeed" ]; then
			worldSeed="$defaultSeed"
		fi


		if [ "$worldMode" = "create" ]; then
			echo "New world '$worldName' detected, creating..."
			SQL "UPDATE worlds SET mode='creating' WHERE name='$worldName'"
			if [ ! -d "$worldsDirectoryRoot/$worldName" ]; then
				echo " Worlds directory for '$worldName' is missing, creating..."

				#get next availble port
				worldPort=$(getNextPort)
				SQL "UPDATE worlds SET port='$worldPort' WHERE name='$worldName'"

				mkdir -p $worldsDirectoryRoot/$worldName
				echo "Deploying new world '$worldName'..."
				chown -R phvalheim: $worldsDirectoryRoot/$worldName
				su phvalheim -c "bash /opt/stateless/games/valheim/scripts/deployValheim.sh $worldName $worldSeed"
				RESULT=$?
				if [ $RESULT = 0 ]; then
					echo " World '$worldName' successfully created..."
					SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"
				else
					echo " ERROR: World '$worldName' failed deployment..."
					SQL "DELETE FROM worlds WHERE name='$worldName'"
				fi
			fi
		fi

		if [ "$worldMode" = "delete" ]; then
			echo "Delete command received for world '$worldName':"
			worldNameLength=$(echo "$worldName"|wc -c)
			if [ $worldNameLength -gt 1 ]; then
				echo " Deleting world '$worldName'..."
				rm -rf $worldsDirectoryRoot/$worldName
				SQL "DELETE FROM worlds WHERE name='$worldName'"
			fi
		fi

                if [ "$worldMode" = "stop" ]; then
			echo "Stop command received for world '$worldName':"
			worldPID=$(SQL "SELECT pid FROM worlds WHERE id='$worldID';")	
			ps -p $worldPID > /dev/null 2>&1
			if [ $? = 0 ]; then
				SQL "UPDATE worlds SET mode='stopping' WHERE name='$worldName'"
				echo " Stopping world '$worldName'..."
                                list_descendants (){
                                        local children=$(ps -o pid= --ppid "$1")
                                        for pid in $children; do
                                                list_descendants "$pid"
                                        done
                                        echo "$children"
                                }
i
                                kill -INT $(list_descendants $worldPID)
			else
				echo " World '$worldName' doesn't appear to be running..."
				SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"
			fi

			#Give it time to stop (we're sending a graceful shutdown, SIGINT)
			killLoop=0
			while [ $killLoop -le 5 ]; do
				sleep 10 
				let killLoop=killLoop+1
				ps -p $worldPID > /dev/null 2>&1
	                        if [ ! $? = 0 ]; then
	                                echo " World '$worldName' successfully stopped."
					SQL "UPDATE worlds SET mode='stopped' WHERE name='$worldName'"
					break
				else
					echo " World '$worldName' did not stop in the allowed time of 10 seconds. The world may still stop soon. You should probably check this..."
	                        fi
			done
		
		fi

		if [ "$worldMode" = "start" ]; then
			echo "Start command recieved for world '$worldName':"
			worldPID=$(SQL "SELECT pid FROM worlds WHERE id='$worldID';")
			ps -p $worldPID > /dev/null 2>&1
			if [ $? = 0 ]; then
				echo "World '$worldName' is already running..."
				SQL "UPDATE worlds SET mode='running' WHERE name='$worldName'"
			else
				su phvalheim -c "/opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort" &

				SQL "UPDATE worlds SET mode='starting' WHERE name='$worldName'"

				worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
				worldPID_status=$?
				while [ ! $worldPID_status = 0 ]; do
					echo "Waiting for world '$worldName' to start..."
					sleep 2
					worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
	                                worldPID_status=$?
				done
	
				
                                worldPID=$(ps -ef |grep "sh -c /opt/stateless/games/valheim/scripts/startWorld.sh $worldName hammertime $worldPort"|grep -v grep|tr -s " "|cut -d " " -f2|tail -1)
                                worldPID_status=$?	
				if [ $worldPID_status = 0 ]; then
					echo "World '$worldName' has started!"
					SQL "UPDATE worlds SET pid='$worldPID' WHERE name='$worldName'"
					SQL "UPDATE worlds SET mode='running' WHERE name='$worldName'"
				else
					echo "World '$worldName' wasn't able to start, exiting..."
					SQL "UPDATE worlds SET mode='broken' WHERE name='$worldName'"
				fi
			fi
		fi



	done

done
####### END: Main loop #######
